name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install MinGW
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Build in release mode
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}


      - name: Prepare release assets
        run: |
          # Create a temporary directory for the release assets
          mkdir -p release-assets

          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            EXECUTABLE_NAME="discord_watchdog.exe"
          else
            EXECUTABLE_NAME="discord_watchdog"
          fi

          cp target/${{ matrix.target }}/release/$EXECUTABLE_NAME release-assets/

          if [ -f ".env.example" ]; then
            cp .env.example release-assets/.env
            echo "Created .env from .env.example"
          else
            echo ".env.example not found!" >&2
            exit 1
          fi

          if [ -f "Config.example.toml" ]; then
            cp Config.example.toml release-assets/Config.toml
          else
            echo "Config.example.toml not found!" >&2
            exit 1
          fi


          cp README.md LICENSE-APACHE LICENSE-MIT release-assets/

          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            ARCHIVE_NAME="discord_watchdog-windows-x86_64.zip"
          else
            ARCHIVE_NAME="discord_watchdog-linux-x86_64.zip"
          fi

          (cd release-assets && zip -r ../$ARCHIVE_NAME ./)

          # Clean up
          rm -rf release-assets

      - name: Upload release asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-release
          path: ${{ github.workspace }}/discord_watchdog-*.zip

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/x86_64-unknown-linux-gnu-release/discord_watchdog-linux-x86_64.zip
          asset_name: discord_watchdog-linux-x86_64.zip
          asset_content_type: application/zip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/x86_64-pc-windows-gnu-release/discord_watchdog-windows-x86_64.zip
          asset_name: discord_watchdog-windows-x86_64.zip
          asset_content_type: application/zip